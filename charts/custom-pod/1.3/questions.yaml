rancher_min_version: 2.7.5
questions:
- variable: global.registry
  label: "Registry"
  group: "Global Settings"
  default: "aiprdkir.ai.neuca.pl"
  type: string
- variable: global.nodeSelectorEnabled
  label: "Node Selector"
  group: "Global Settings"
  default: true
  type: boolean
  show_subquestion_if: true
  subquestions:
  - variable: global.nodeSelector
    group: "Global Settings"
    label: "Node Selector"
    description: "Available values for nvidia.com/gpu.product are: NVIDIA-H100-NVL, NVIDIA-L40S"
    default:
      nvidia.com/gpu.present: "true"
      nvidia.com/gpu.product: "NVIDIA-H100-NVL"
    type: "map"
    required: true
- variable: image.repository
  label: "Image"
  group: "Image"
  default: "aiprdkir.ai.neuca.pl/library/cuda"
  required: true
  type: string
- variable: image.tag
  group: "Image"
  default: "12-2-cudnn-8.9.7"
  label: "Image tag"
  required: true
  type: string
- variable: startupScript
  label: "Startup Script"
  group: "Startu Script"
  type: "multiline"
  default: |
    mkdir -p /root/.ssh
    chmod 700 /root/.ssh
    mkdir /var/run/sshd # bug in 22.04
    /usr/sbin/sshd -De
  required: true
- variable: storage.enabled
  label: "Pod Storage"
  default: true
  type: boolean
  group: "Storage"
  show_subquestion_if: true
  subquestions:
  - variable: storage.storageSize
    label: "Storage Size"
    default: "10Gi"
    type: string
    required: true
  - variable: storage.mountPath
    default: "/data"
    label: "Mount Point"
    type: string
    required: true
  - variable: storage.storageClassName
    label: "Storage Class Name"
    default: ""
    type: string
    required: false
  - variable: storage.accessMode
    label: "Storage Access Mode"
    default: "ReadWriteMany"
    type: enum
    options:
    - "ReadWriteMany"
    - "ReadWriteOnce"
    required: true

  - variable: "storage.additionalStorage.enabled"
    label: "Enable Additional Storage"
    description: "Enable to add extra storage volumes."
    type: "boolean"
    default: false

  - variable: "storage.additionalStorage.volumes"
    label: "Additional Volumes"
    description: "Configure additional storage volumes and their mount points."
    type: "array"
    show_if: "storage.additionalStorage.enabled=true"
    subquestions:
     - variable: storage.additionalStorage.volumeCount
       label: "Number of Volumes (max 5)"
       type: int
       default: 1
       min: 1
       max: 5
   
     # Loop for volumes based on volumeCount
     - variable: storage.additionalStorage.volumes[0].type
       label: "Volume 1 Type"
       type: enum
       options:
         - persistentVolumeClaim
         - secret
         - configMap
       default: persistentVolumeClaim
       show_if: "storage.additionalStorage.enabled && storage.additionalStorage.volumeCount >= 1"
   
     - variable: storage.additionalStorage.volumes[0].persistentVolumeClaim.claimName
       label: "PVC Claim Name (Volume 1)"
       type: string
       show_if: "storage.additionalStorage.volumes[0].type == 'persistentVolumeClaim' && storage.additionalStorage.volumeCount >= 1"
   
     - variable: storage.additionalStorage.volumes[1].type
       label: "Volume 2 Type"
       type: enum
       options:
         - persistentVolumeClaim
         - secret
         - configMap
       default: persistentVolumeClaim
       show_if: "storage.additionalStorage.enabled && storage.additionalStorage.volumeCount >= 2"
   
     - variable: storage.additionalStorage.volumes[1].persistentVolumeClaim.claimName
       label: "PVC Claim Name (Volume 2)"
       type: string
       show_if: "storage.additionalStorage.volumes[1].type == 'persistentVolumeClaim' && storage.additionalStorage.volumeCount >= 2"
   
     # Continue for more volumes (e.g., volumes[2], volumes[3], etc.)
   
     # Mount paths for each volume
     - variable: storage.additionalStorage.volumeMounts[1].mountPath
       label: "Mount Path (Volume 1)"
       type: string
       default: "/data"
       show_if: "storage.additionalStorage.enabled && storage.additionalStorage.volumeCount >= 1"
   
     - variable: storage.additionalStorage.volumeMounts[1].mountPath
       label: "Mount Path (Volume 2)"
       type: string
       default: "/data"
       show_if: "storage.additionalStorage.enabled && storage.additionalStorage.volumeCount >= 2"
   
     # Continue for volumeMounts[2], volumeMounts[3], etc.

     - variable: storage.additionalStorage.volumes[2].type
       label: "Volume 3 Type"
       type: enum
       options:
         - persistentVolumeClaim
         - secret
         - configMap
       default: persistentVolumeClaim
       show_if: "storage.additionalStorage.enabled && storage.additionalStorage.volumeCount >= 2"
   
     - variable: storage.additionalStorage.volumes[2].persistentVolumeClaim.claimName
       label: "PVC Claim Name (Volume 2)"
       type: string
       show_if: "storage.additionalStorage.volumes[2].type == 'persistentVolumeClaim' && storage.additionalStorage.volumeCount >= 2"
   
     # Continue for more volumes (e.g., volumes[2], volumes[3], etc.)
   
     # Mount paths for each volume
     - variable: storage.additionalStorage.volumeMounts[2].mountPath
       label: "Mount Path (Volume 1)"
       type: string
       default: "/data"
       show_if: "storage.additionalStorage.enabled && storage.additionalStorage.volumeCount >= 1"
   
     - variable: storage.additionalStorage.volumeMounts[2].mountPath
       label: "Mount Path (Volume 2)"
       type: string
       default: "/data"
       show_if: "storage.additionalStorage.enabled && storage.additionalStorage.volumeCount >= 2"
   
     # Continue for volumeMounts[2], volumeMounts[3], etc.
